{
"openapi": "3.0.3",
"info": {
"description": "Endpoint for doing various actions connected to the customer domain\n# Introduction\nEnfuce API offers ways to operation on account, card and customer level.\n",
"version": "1",
"title": "Customer details API",
"contact": {
"name": "Enfuce Financial Services",
"url": "https://enfuce.com",
"email": "info@enfuce.com"
},
"x-logo": {
"url": "https://developer.enfuce.com/images/enfuce.svg",
"altText": "Enfuce logo"
}
},
"servers": [
{
"url": "https://integration-api-cat2.{{environment}}.ext.{{realm}}.cia.enfuce.com/customer"
},
{
"url": "https://integration-api-cat2.live.ext.prod.cia.enfuce.com/customer",
"description": "Live environment"
}
],
"tags": [
{
"name": "Create a customer",
"description": "<p>Endpoints for creating a customer</p><hr><h3>Idempotent Requests</h3><p>Endpoints in this section support idempotency, which means that you can safely submit identical requests without making changes to the data storage twice. To perform an idempotent request, provide <code>x-idempotency-key</code> header with the request.</p><p>Idempotency works by saving <strong>URL</strong>, <strong>method</strong>, and <strong>idempotency header</strong> of your request as a key and the result of the request as value for 24 hours.</p><p>In case an error occurs while processing the request, the error message will be persisted and resent on possible retries. Please note that fields of <code>uuid</code> and <code>timestamp</code> fields of the error will be regenerated to be able to track down the identity of each error.</p><p>Idempotency key needs to be a unique value generated by the client which server then uses to activate the feature to be able to recognize possible future retries of the same request. The max length of the idempotency key is <strong>64 characters</strong>.</p>"
},
{
"name": "Update a customer",
"description": "<p>Endpoints for updating a customer</p><hr><h3>Idempotent Requests</h3><p>Endpoints in this section support idempotency, which means that you can safely submit identical requests without making changes to the data storage twice. To perform an idempotent request, provide <code>x-idempotency-key</code> header with the request.</p><p>Idempotency works by saving <strong>URL</strong>, <strong>method</strong>, and <strong>idempotency header</strong> of your request as a key and the result of the request as value for 24 hours.</p><p>In case an error occurs while processing the request, the error message will be persisted and resent on possible retries. Please note that fields of <code>uuid</code> and <code>timestamp</code> fields of the error will be regenerated to be able to track down the identity of each error.</p><p>Idempotency key needs to be a unique value generated by the client which server then uses to activate the feature to be able to recognize possible future retries of the same request. The max length of the idempotency key is <strong>64 characters</strong>.</p>"
},
{
"name": "Get customer information",
"description": "Endpoints for fetching a customer"
}
],
"paths": {
"/v3/customerNumber/{customerNumber}": {
"get": {
"tags": [
"Get customer information"
],
"summary": "Get customer by customer number",
"description": "This operation will return customer data related to given customer number",
"operationId": "getCustomerOnNumberUsingGET",
"parameters": [
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "customerNumber",
"in": "path",
"description": "The customer number of which customer you want fetch details on",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Successful retrieval of customer details",
"content": {
"application/json": {
"schema": {
"discriminator": {
"propertyName": "role",
"mapping": {
"CORPORATE": "#/components/schemas/CorporateCustomerResponse",
"PRIVATE": "#/components/schemas/PrivateCustomerResponse"
}
}
}
}
}
},
"400": {
"description": "Bad request",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"500": {
"description": "Internal server error",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/PRIVATE": {
      "post": {
        "tags": [
          "Create a customer"
        ],
        "summary": "Create private customer",
        "description": "This operation will create a private customer.",
        "operationId": "createPrivateCustomerUsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createPrivateResourceBody"
},
"responses": {
"201": {
"description": "Successful creation of customer",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"401": {
"description": "Unauthorized",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
}
},
"deprecated": false
}
},
"/v3/PRIVATE/{id}": {
"patch": {
"tags": [
"Update a customer"
],
"summary": "Update a private customer",
"description": "This operation will update a given customer.",
"operationId": "updatePrivateCustomerUsingPATCH",
"parameters": [
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "id",
"in": "path",
"description": "The customer id of which customer you want to update",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"$ref": "#/components/requestBodies/patchPrivateResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
}
}
}
},
"400": {
"description": "Bad request",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"500": {
"description": "Internal server error",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/CORPORATE": {
      "post": {
        "tags": [
          "Create a customer"
        ],
        "summary": "Create corporate customer",
        "description": "This operation will create a corporate customer.",
        "operationId": "createCorporateCustomerUsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createCorporateResourceBody"
},
"responses": {
"201": {
"description": "Successful creation of customer",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"401": {
"description": "Unauthorized",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
}
},
"deprecated": false
}
},
"/v3/CORPORATE/{id}": {
"patch": {
"tags": [
"Update a customer"
],
"summary": "Update a corporate customer",
"description": "This operation will update a given customer.",
"operationId": "updateCorporateCustomerUsingPATCH",
"parameters": [
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "id",
"in": "path",
"description": "The customer id of which customer you want to update",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"$ref": "#/components/requestBodies/patchCorporateResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
}
}
}
},
"400": {
"description": "Bad request",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"500": {
"description": "Internal server error",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/{id}": {
      "get": {
        "tags": [
          "Get customer information"
        ],
        "summary": "Get customer by customer id",
        "description": "This operation will return customer data related to give customer id",
        "operationId": "getCustomerByIdUsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The customer id of which customer you want fetch details on",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of customer details",
            "content": {
              "application/json": {
                "schema": {
                  "discriminator": {
                    "propertyName": "role",
                    "mapping": {
                      "CORPORATE": "#/components/schemas/CorporateCustomerResponse",
                      "PRIVATE": "#/components/schemas/PrivateCustomerResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
},
"401": {
"$ref": "#/components/responses/error401"
          },
          "403": {
            "$ref": "#/components/responses/error403"
},
"404": {
"$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
}
},
"deprecated": false
}
},
"/v3/{id}/link": {
"get": {
"tags": [
"Customer hierarchy"
],
"summary": "Get linked customer by customer id",
"description": "This operation will return linked customer data related to give customer id",
"operationId": "getLinkedCustomerByIdUsingGET",
"parameters": [
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "id",
"in": "path",
"description": "The customer id of which customer you want fetch details on",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Successful retrieval of linked customer details",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/GetLinkedCustomerResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
},
"401": {
"$ref": "#/components/responses/error401"
          },
          "403": {
            "$ref": "#/components/responses/error403"
},
"404": {
"$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
}
},
"deprecated": false
},
"post": {
"tags": [
"Customer hierarchy"
],
"summary": "Create a link to customer",
"description": "This operation will create a link to customer.",
"operationId": "createLinkedCustomerUsingPOST",
"parameters": [
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "id",
"in": "path",
"description": "The customer id of the customer you want to create the link from.",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"$ref": "#/components/requestBodies/createLinkedCustomerResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of linked customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
}
}
}
},
"400": {
"$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
},
"403": {
"$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
},
"500": {
"$ref": "#/components/responses/error500"
          }
        },
        "deprecated": false
      }
    },
    "/v3/{id}/link/{linkId}": {
      "delete": {
        "tags": [
          "Customer hierarchy"
        ],
        "summary": "Delete a link to customer",
        "description": "This operation will delete a link to customer.",
        "operationId": "deleteLinkedCustomerUsingDELETE",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The customer id of the customer you want to delete the link from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "The id of the link you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful deleted linked of customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
}
}
}
},
"400": {
"$ref": "#/components/responses/error400"
          },
          "401": {
            "$ref": "#/components/responses/error401"
},
"403": {
"$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
},
"500": {
"$ref": "#/components/responses/error500"
          }
        },
        "deprecated": false
      }
    },
    "/v3/{role}/{id}/update/{propertyToUpdate}": {
      "post": {
        "tags": [
          "Update a customer"
        ],
        "summary": "Update a customer",
        "description": "Basic operation for updating a customer. Check parameter updateProperty for possible parameters to update\n",
        "operationId": "updateCustomerUsingPOST",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "Which customer role the customer is",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/role"
}
},
{
"name": "id",
"in": "path",
"description": "The customer id of customer you want to update",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "auditUser",
"in": "query",
"description": "The audit user to log the request",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "propertyToUpdate",
"in": "path",
"description": "What property you want to update",
"required": true,
"schema": {
"type": "string",
"enum": [
"DELETE_TEMPORARY_ADDRESS"
]
}
}
],
"requestBody": {
"$ref": "#/components/requestBodies/updateResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
}
}
}
},
"400": {
"description": "Given property to update is invalid",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"500": {
"description": "Internal server error",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "Basic authentication is used to authenticate towards Enfuce API. It is described in more detail in RFC 7617.",
        "scheme": "basic"
      }
    },
    "requestBodies": {
      "createPrivateResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePrivateResourceBody"
}
}
},
"description": "The related private customer data",
"required": true
},
"createCorporateResourceBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/CreateCorporateResourceBody"
            }
          }
        },
        "description": "The related corporate customer data",
        "required": true
      },
      "createLinkedCustomerResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateLinkedCustomerResourceBody"
}
}
},
"description": "The related linked customer data",
"required": true
},
"updateResourceBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/UpdateResourceBody"
            }
          }
        },
        "description": "The new value of selected property. You should only provide a value for the property you want to update, the other ones should be null\n",
        "required": true
      },
      "patchPrivateResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PatchPrivateResourceBody"
}
}
},
"description": "The fields that you want to apply to your newly created customer, these values will override the predefined template values\n",
"required": true
},
"patchCorporateResourceBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/PatchCorporateResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created customer, these values will override the predefined template values\n",
        "required": true
      }
    },
    "schemas": {
      "CustomerResourceBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 255,
            "example": "info@enfuce.com"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
},
"mobileNumber": {
"$ref": "#/components/schemas/mobileNumber"
          }
        },
        "title": "customerResourceBody"
      },
      "CreateResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerResourceBody"
},
{
"properties": {
"customerNumber": {
"$ref": "#/components/schemas/customerNumber"
              },
              "locale": {
                "$ref": "#/components/schemas/locale"
},
"regNo": {
"$ref": "#/components/schemas/regNo"
              },
              "screening": {
                "$ref": "#/components/schemas/screening"
},
"address": {
"description": "Address used if no other address are set on account and card levels",
"$ref": "#/components/schemas/address"
              },
              "temporaryAddress": {
                "description": "Temporary address used to for a limited time be used instead of other address set either on customer, account or card level.\n",
                "$ref": "#/components/schemas/address"
}
},
"required": [
"address",
"locale",
"regNo",
"customerNumber"
]
}
],
"title": "createResourceBody"
},
"CreatePrivateResourceBody": {
"allOf": [
{
"$ref": "#/components/schemas/CreateResourceBody"
          },
          {
            "properties": {
              "salutation": {
                "$ref": "#/components/schemas/salutation"
},
"firstName": {
"$ref": "#/components/schemas/firstName"
              },
              "middleName": {
                "$ref": "#/components/schemas/middleName"
},
"lastName": {
"$ref": "#/components/schemas/lastName"
              },
              "dateOfBirth": {
                "$ref": "#/components/schemas/dateOfBirth"
},
"nationality": {
"$ref": "#/components/schemas/nationality"
              }
            },
            "required": [
              "firstName",
              "lastName"
            ]
          }
        ],
        "title": "createPrivateResourceBody"
      },
      "CreateCorporateResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateResourceBody"
},
{
"properties": {
"name": {
"$ref": "#/components/schemas/name"
              },
              "customerRepresentative": {
                "$ref": "#/components/schemas/customerRepresentative"
},
"registration": {
"$ref": "#/components/schemas/registration"
              }
            },
            "required": [
              "address",
              "locale",
              "name",
              "regNo",
              "customerNumber"
            ]
          }
        ],
        "title": "createCorporateResourceBody"
      },
      "CreateLinkedCustomerResourceBody": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "description": "Link type",
                "enum": [
                  "CUSTOMER_LINK"
                ]
              },
              "customerId": {
                "type": "string",
                "description": "The customer id of the customer you want to create the link to.",
                "example": 5123465
              }
            },
            "required": [
              "type",
              "customerId"
            ]
          }
        ],
        "title": "createLinkedCustomerResourceBody"
      },
      "UpdateResourceBody": {
        "type": "object",
        "properties": {
          "dummy": {
            "type": "string",
            "description": "Dummy value not used"
          }
        },
        "title": "updateResourceBody",
        "description": "Should set the value of the property you are updating, leave rest empty"
      },
      "PatchResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerResourceBody"
},
{
"properties": {
"customerNumber": {
"$ref": "#/components/schemas/customerNumber"
              },
              "regNo": {
                "$ref": "#/components/schemas/regNo"
},
"locale": {
"$ref": "#/components/schemas/locale"
              },
              "screening": {
                "$ref": "#/components/schemas/screening"
},
"address": {
"description": "Address used if no other address are set on account and card levels.",
"$ref": "#/components/schemas/updateAddress"
              },
              "temporaryAddress": {
                "description": "Temporary address used to for a limited time be used instead of other address set either on customer, account or card level.\n",
                "$ref": "#/components/schemas/updateAddress"
}
}
}
],
"title": "patchResourceBody",
"description": "Updating set values"
},
"PatchPrivateResourceBody": {
"allOf": [
{
"$ref": "#/components/schemas/PatchResourceBody"
},
{
"properties": {
"salutation": {
"$ref": "#/components/schemas/salutation"
},
"firstName": {
"$ref": "#/components/schemas/firstName"
},
"middleName": {
"$ref": "#/components/schemas/middleName"
},
"lastName": {
"$ref": "#/components/schemas/lastName"
},
"dateOfBirth": {
"$ref": "#/components/schemas/dateOfBirth"
},
"nationality": {
"$ref": "#/components/schemas/nationality"
},
"deceasedDate": {
"$ref": "#/components/schemas/deceasedDate"
}
}
}
],
"title": "patchPrivateResourceBody",
"description": "Updating set values"
},
"PatchCorporateResourceBody": {
"allOf": [
{
"$ref": "#/components/schemas/PatchResourceBody"
},
{
"properties": {
"name": {
"$ref": "#/components/schemas/name"
},
"customerRepresentative": {
"$ref": "#/components/schemas/customerRepresentative"
},
"registration": {
"$ref": "#/components/schemas/registration"
},
"bankruptcyDate": {
"$ref": "#/components/schemas/bankruptcyDate"
}
}
}
],
"title": "patchCorporateResourceBody",
"description": "Updating set values"
},
"CustomerResponse": {
"allOf": [
{
"$ref": "#/components/schemas/CreateResourceBody"
          },
          {
            "properties": {
              "customerNumber": {
                "$ref": "#/components/schemas/customerNumber"
},
"id": {
"type": "string",
"description": "Unique identifier for customer assigned by Enfuce",
"example": 151077912
},
"locale": {
"$ref": "#/components/schemas/locale"
              },
              "regNo": {
                "$ref": "#/components/schemas/regNo"
},
"role": {
"$ref": "#/components/schemas/role"
              },
              "screening": {
                "$ref": "#/components/schemas/screening"
}
},
"required": [
"id",
"role",
"regNo"
]
}
],
"title": "customerResponse"
},
"PrivateCustomerResponse": {
"allOf": [
{
"$ref": "#/components/schemas/CustomerResponse"
},
{
"properties": {
"salutation": {
"$ref": "#/components/schemas/salutation"
},
"firstName": {
"$ref": "#/components/schemas/firstName"
},
"middleName": {
"$ref": "#/components/schemas/middleName"
},
"lastName": {
"$ref": "#/components/schemas/lastName"
},
"dateOfBirth": {
"$ref": "#/components/schemas/dateOfBirth"
},
"nationality": {
"$ref": "#/components/schemas/nationality"
},
"screening": {
"$ref": "#/components/schemas/screening"
},
"deceasedDate": {
"$ref": "#/components/schemas/deceasedDate"
}
}
}
],
"title": "privateCustomerResponse"
},
"CorporateCustomerResponse": {
"allOf": [
{
"$ref": "#/components/schemas/CustomerResponse"
},
{
"properties": {
"name": {
"$ref": "#/components/schemas/name"
},
"customerRepresentative": {
"$ref": "#/components/schemas/customerRepresentative"
},
"registration": {
"$ref": "#/components/schemas/registration"
},
"bankruptcyDate": {
"$ref": "#/components/schemas/bankruptcyDate"
}
}
}
],
"title": "corporateCustomerResponse"
},
"LinkedCustomerResponse": {
"type": "object",
"properties": {
"customerId": {
"$ref": "#/components/schemas/id"
          },
          "type": {
            "type": "string",
            "description": "Link type",
            "enum": [
              "CUSTOMER_LINK"
            ]
          }
        }
      },
      "GetLinkedCustomerResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LinkedCustomerResponse"
},
{
"properties": {
"id": {
"type": "string",
"description": "Unique identifier for the link",
"example": 11601
}
}
}
]
},
"customerNumber": {
"description": "Can contain both letters and numbers. Max character limit is 32",
"type": "string",
"pattern": "[A-Za-z0-9-]{1,32}",
"example": "ABCDEFGH123456789"
},
"id": {
"type": "string",
"description": "Unique identifier for customer assigned by Enfuce",
"example": 151077912
},
"customerRepresentative": {
"type": "string",
"maxLength": 64,
"description": "Field value is printed to outgoing invoices. In order to use this field it should be agreed in advantage with selected printing partner how it's represented on the invoice.\n",
"example": "Mrs Smith"
},
"dateOfBirth": {
"description": "Mandatory if card is issued to consumer via BIN sponsorship program",
"type": "date",
"example": "1935-01-08"
},
"firstName": {
"type": "string",
"maxLength": 255,
"example": "Matti"
},
"lastName": {
"type": "string",
"maxLength": 255,
"example": "Korhonen"
},
"middleName": {
"type": "string",
"maxLength": 255,
"example": "Juha"
},
"name": {
"description": "Registered name of the company",
"type": "string",
"maxLength": 255,
"example": "Enfuce Financial Services Oy"
},
"regNo": {
"description": "Identifier to customer, for example SSN. Enfuce does not do any validation for this regNo",
"type": "string",
"maxLength": 32,
"example": "19560606-1234"
},
"role": {
"type": "string",
"enum": [
"CORPORATE",
"PRIVATE"
]
},
"salutation": {
"type": "string",
"maxLength": 32,
"example": "Mr"
},
"nationality": {
"type": "array",
"maxItems": 3,
"description": "A valid ISO 3166-1 alpha-3 country code, except for QZZ (UNMIK in Kosovo) and ROM for Romania.",
"example": [
"FIN",
"SWE"
],
"items": {
"$ref": "#/components/schemas/country"
        }
      },
      "deceasedDate": {
        "type": "date",
        "format": "date",
        "description": "The date when the customer has deceased, in ISO 8601 format (\"YYYY-MM-DD\"). \nThe field can be used purely for informational purposes and does not trigger any further actions or processes implemented by Enfuce.\n",
        "example": "2023-05-03"
      },
      "registration": {
        "type": "object",
        "properties": {
          "authority": {
            "$ref": "#/components/schemas/authority"
},
"registrationDate": {
"$ref": "#/components/schemas/registrationDate"
          }
        }
      },
      "authority": {
        "type": "string",
        "maxLength": 70,
        "description": "Registration authority where the company was registered",
        "example": "Patent and Registration Office"
      },
      "registrationDate": {
        "type": "date",
        "format": "date",
        "description": "Date of the company registration in ISO 8601 format (yyyy-MM-dd)",
        "example": "2023-05-03"
      },
      "bankruptcyDate": {
        "type": "date",
        "format": "date",
        "description": "The date on which the company declared bankruptcy, in ISO 8601 format (\"YYYY-MM-DD\"). \nThe field can be used purely for informational purposes and does not trigger any further actions or processes implemented by Enfuce.\n",
        "example": "2023-05-03"
      },
      "screening": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "boolean",
            "nullable": false,
            "example": true,
            "description": "This field indicates the status of a customer's PEP and sanction screening.\nA value of true means that the customer has already been screened and passed the PEP and sanction checks, confirming no matches were found on relevant lists. \nConversely, a value of false indicates that the PEP and sanction screening process is still in progress for this customer. \nIt is important to note that this field reports the current status of the screening process; it does not imply any further actions or legal consequences resulting from the screening outcome.\n"
          }
        },
        "description": "PEP and Sanction screening. Fields can be used purely for informational purposes and do not trigger any further actions or processes.\n"
      },
      "phoneNumber": {
        "type": "string",
        "description": "Land line phone number to customer, must be full number including country code and starting with +",
        "pattern": "([+]){1}([1-9]){1}([0-9]){5,14}",
        "example": "+35821010001"
      },
      "mobileNumber": {
        "type": "string",
        "description": "Mobile number to customer, must be full number including country code and starting with +",
        "pattern": "([+]){1}([1-9]){1}([0-9]){5,14}",
        "example": "+358401234567"
      },
      "locale": {
        "type": "string",
        "description": "Customer's language and country code, these are the valid locales in API",
        "enum": [
          "af_ZA",
          "ar_AE",
          "ar_BH",
          "ar_DZ",
          "ar_EG",
          "ar_IQ",
          "ar_JO",
          "ar_KW",
          "ar_LB",
          "ar_LY",
          "ar_MA",
          "ar_OM",
          "ar_QA",
          "ar_SA",
          "ar_SY",
          "ar_TN",
          "ar_YE",
          "az_AZ",
          "be_BY",
          "bg_BG",
          "bn_IN",
          "bs_BA",
          "ca_ES",
          "cs_CZ",
          "cy_GB",
          "da_DK",
          "de_AT",
          "de_CH",
          "de_DE",
          "de_LI",
          "de_NL",
          "el_GR",
          "en_AU",
          "en_BZ",
          "en_CA",
          "en_GB",
          "en_IE",
          "en_JM",
          "en_MT",
          "en_NZ",
          "en_PH",
          "en_TT",
          "en_US",
          "en_VI",
          "en_ZA",
          "en_ZW",
          "es_AR",
          "es_BO",
          "es_CL",
          "es_CO",
          "es_CR",
          "es_DO",
          "es_EC",
          "es_ES",
          "es_GT",
          "es_HN",
          "es_MX",
          "es_NI",
          "es_PA",
          "es_PE",
          "es_PR",
          "es_PY",
          "es_SV",
          "es_UY",
          "es_VE",
          "et_EE",
          "eu_ES",
          "fa_IR",
          "fi_FI",
          "fo_FO",
          "fr_BE",
          "fr_CA",
          "fr_CH",
          "fr_FR",
          "fr_MC",
          "fr_NL",
          "ga_IE",
          "gl_ES",
          "gu_IN",
          "he_IL",
          "hi_IN",
          "hr_HR",
          "hu_HU",
          "hy_AM",
          "id_ID",
          "is_IS",
          "it_CH",
          "it_IT",
          "ja_JP",
          "ka_GE",
          "kk_KZ",
          "kl_GL",
          "kn_IN",
          "ko_KR",
          "kok_IN",
          "lt_LT",
          "lv_LV",
          "mk_MK",
          "ml_IN",
          "mn_MN",
          "mr_IN",
          "ms_BN",
          "ms_MY",
          "mt_MT",
          "nb_NO",
          "nl_BE",
          "nl_NL",
          "nn_NO",
          "no_NO",
          "pa_IN",
          "pl_PL",
          "pt_BR",
          "pt_PT",
          "ro_RO",
          "ru_RU",
          "se_NO",
          "sk_SK",
          "sl_SI",
          "sq_AL",
          "sr_BA",
          "sr_CS",
          "sv_FI",
          "sv_SE",
          "sw_KE",
          "syr_SY",
          "ta_IN",
          "te_IN",
          "th_TH",
          "tn_ZA",
          "tr_TR",
          "uk_UA",
          "uz_UZ",
          "vi_VN",
          "xh_ZA",
          "zh_CN",
          "zh_HK",
          "zh_MO",
          "zh_SG",
          "zh_TW",
          "zu_ZA"
        ]
      },
      "country": {
        "type": "string",
        "description": "A valid ISO 3166-1 alpha-3 country code, except for QZZ (UNMIK in Kosovo) and ROM for Romania.",
        "pattern": "[A-Z]{3}",
        "example": "FIN"
      },
      "address": {
        "type": "object",
        "required": [
          "address1",
          "city",
          "country",
          "zipCode"
        ],
        "properties": {
          "address1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "Kings street 12"
          },
          "address2": {
            "type": "string",
            "maxLength": 255
          },
          "address3": {
            "type": "string",
            "maxLength": 255
          },
          "address4": {
            "type": "string",
            "maxLength": 255
          },
          "city": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "Mariehamn"
          },
          "country": {
            "$ref": "#/components/schemas/country"
},
"region": {
"type": "string",
"maxLength": 32,
"example": "Åland Islands"
},
"zipCode": {
"type": "string",
"minLength": 1,
"maxLength": 32,
"example": 22100
}
},
"title": "address"
},
"errorResponse": {
"type": "object",
"properties": {
"code": {
"type": "string",
"description": "An error code indicating what kind of error. I.e. HTTP error code"
},
"message": {
"type": "string",
"description": "Error message in human-readable format"
},
"id": {
"type": "string",
"format": "uuid",
"description": "Unique error identifier"
},
"errorCode": {
"type": "string",
"description": "Enfuce code for a specific error type"
},
"errorType": {
"type": "string",
"description": "Error type",
"enum": [
"STATIC_VALIDATION_ERROR",
"DYNAMIC_VALIDATION_ERROR",
"INTEGRATION_ERROR",
"SECURITY_ERROR",
"UNEXPECTED_ERROR"
]
},
"errorReason": {
"type": "string",
"description": "Free-form text explaining the error reason"
},
"timestamp": {
"type": "string",
"format": "date-time",
"description": "Datetime when error occurred"
}
}
},
"resourceResponse": {
"type": "object",
"properties": {
"description": {
"type": "string",
"description": "Short description of the result of the action"
},
"id": {
"type": "string",
"description": "Will contain the ID of the resource that has been created or updated"
}
},
"title": "resourceResponse"
},
"updateAddress": {
"type": "object",
"properties": {
"address1": {
"type": "string",
"maxLength": 255
},
"address2": {
"type": "string",
"maxLength": 255
},
"address3": {
"type": "string",
"maxLength": 255
},
"address4": {
"type": "string",
"maxLength": 255
},
"city": {
"type": "string",
"maxLength": 255
},
"country": {
"$ref": "#/components/schemas/country"
          },
          "region": {
            "type": "string",
            "maxLength": 32
          },
          "zipCode": {
            "type": "string",
            "maxLength": 32
          }
        },
        "title": "updateAddress"
      }
    },
    "responses": {
      "error400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"error401": {
"description": "Unauthorized",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      },
      "error403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
}
}
}
},
"error404": {
"description": "Not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/errorResponse"
            }
          }
        }
      },
      "error500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errorResponse"
}
}
}
}
}
},
"x-tagGroups": [
{
"name": "Customer",
"tags": [
"Create a customer",
"Get customer information",
"Update a customer",
"Delete a customer",
"Customer hierarchy"
]
}
]
}
