{
  "openapi": "3.0.3",
  "info": {
    "description": "Endpoint for doing various actions connected to a account",
    "version": "1",
    "title": "Account details API",
    "contact": {
      "name": "Enfuce Financial Services",
      "url": "https://enfuce.com",
      "email": "info@enfuce.com"
    },
    "x-logo": {
      "url": "https://developer.enfuce.com/images/enfuce.svg",
      "altText": "Enfuce logo"
    }
  },
  "servers": [
    {
      "url": "https://integration-api-cat2.{{environment}}.ext.{{realm}}.cia.enfuce.com/account"
    },
    {
      "url": "https://integration-api-cat2.live.ext.prod.cia.enfuce.com/account",
      "description": "Live environment"
    }
  ],
  "tags": [
    {
      "name": "Create an account",
      "description": "<p>Endpoints for creating an account</p><hr><h3>Idempotent Requests</h3><p>Endpoints in this section support idempotency, which means that you can safely submit identical requests without making changes to the data storage twice. To perform an idempotent request, provide <code>x-idempotency-key</code> header with the request.</p><p>Idempotency works by saving <strong>URL</strong>, <strong>method</strong>, and <strong>idempotency header</strong> of your request as a key and the result of the request as value for 24 hours.</p><p>In case an error occurs while processing the request, the error message will be persisted and resent on possible retries. Please note that fields of <code>uuid</code> and <code>timestamp</code> fields of the error will be regenerated to be able to track down the identity of each error.</p><p>Idempotency key needs to be a unique value generated by the client which server then uses to activate the feature to be able to recognize possible future retries of the same request. The max length of the idempotency key is <strong>64 characters</strong>.</p>"
    },
    {
      "name": "Update an account",
      "description": "<p>Endpoints for updating an account</p><hr><h3>Idempotent Requests</h3><p>Endpoints in this section support idempotency, which means that you can safely submit identical requests without making changes to the data storage twice. To perform an idempotent request, provide <code>x-idempotency-key</code> header with the request.</p><p>Idempotency works by saving <strong>URL</strong>, <strong>method</strong>, and <strong>idempotency header</strong> of your request as a key and the result of the request as value for 24 hours.</p><p>In case an error occurs while processing the request, the error message will be persisted and resent on possible retries. Please note that fields of <code>uuid</code> and <code>timestamp</code> fields of the error will be regenerated to be able to track down the identity of each error.</p><p>Idempotency key needs to be a unique value generated by the client which server then uses to activate the feature to be able to recognize possible future retries of the same request. The max length of the idempotency key is <strong>64 characters</strong>.</p>"
    },
    {
      "name": "Get account information",
      "description": "Endpoints for fetching an account"
    }
  ],
  "paths": {
    "/v4/CREDIT/customer/{customerId}": {
      "post": {
        "tags": ["Create an account"],
        "summary": "Create credit account",
        "description": "This operation will create a credit account",
        "operationId": "createCreditAccountV4UsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createCreditResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/DEBIT/customer/{customerId}": {
      "post": {
        "tags": ["Create an account"],
        "summary": "Create debit account",
        "description": "This operation will create a debit account",
        "operationId": "createDebitAccountV4UsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDebitResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/PREPAID/customer/{customerId}": {
      "post": {
        "tags": ["Create an account"],
        "summary": "Create prepaid account",
        "description": "This operation will create a prepaid account",
        "operationId": "createPrepaidAccountV4UsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createPrepaidResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/FLEET/customer/{customerId}": {
      "post": {
        "tags": ["Create an account"],
        "summary": "Create fleet account",
        "description": "This operation will create a fleet account",
        "operationId": "createFleetAccountV4UsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createFleetResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/{multiCurr}/customer/{customerId}": {
      "post": {
        "tags": ["Create an account"],
        "summary": "Create a multi-currency account",
        "description": "This operation will create a multicurrency account",
        "operationId": "createMultiCurrencyAccountV4UsingPOST",
        "parameters": [
          {
            "name": "multiCurr",
            "in": "path",
            "description": "Specific multicurrency template",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/multiCurrencyTemplate"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createMultiCurrencyResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/CREDIT/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a credit account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updateCreditAccountV4UsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchCreditResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/CREDIT/reminder/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a credit account reminder data",
        "description": "This operation will update given reminder data fields given an account id",
        "operationId": "updateCreditAccountReminderV4UsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchCreditRemindersResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/DEBIT/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a debit account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updateDebitAccountV4UsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchDebitResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/PREPAID/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a prepaid account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updatePrepaidAccountV4UsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchPrepaidResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/FLEET/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a fleet account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updateFleetAccountV4UsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchFleetResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/{multiCurr}/{id}": {
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update a multicurrency account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updateMultiCurrencyAccountV4UsingPATCH",
        "parameters": [
          {
            "name": "multiCurr",
            "in": "path",
            "description": "Specific multicurrency template",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/multiCurrencyTemplate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchMultiCurrencyResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/{id}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get account",
        "description": "This operation will respond with an account given account id",
        "operationId": "getAccountV4UsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of the account",
            "content": {
              "application/json": {
                "schema": {
                  "discriminator": {
                    "propertyName": "template",
                    "mapping": {
                      "CREDIT": "#/components/schemas/creditAccountResponse",
                      "DEBIT": "#/components/schemas/debitAccountResponse",
                      "PREPAID": "#/components/schemas/prepaidAccountResponse",
                      "FLEET": "#/components/schemas/fleetAccountResponse",
                      "MULTICURR_EUR_DE": "#/components/schemas/multiCurrAccountResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/accountNumber/{accountNumber}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get account by accountNumber",
        "description": "This operation will respond with an account given account number",
        "operationId": "getAccountByAccountNumberV4UsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountNumber",
            "in": "path",
            "description": "The account number for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of the account",
            "content": {
              "application/json": {
                "schema": {
                  "discriminator": {
                    "propertyName": "template",
                    "mapping": {
                      "CREDIT": "#/components/schemas/creditAccountResponse",
                      "DEBIT": "#/components/schemas/debitAccountResponse",
                      "PREPAID": "#/components/schemas/prepaidAccountResponse",
                      "FLEET": "#/components/schemas/fleetAccountResponse",
                      "MULTICURR_EUR_DE": "#/components/schemas/multiCurrAccountResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/customer/{customerId}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get accounts given customerId",
        "description": "This operation will respond with a list of accounts given the customer id",
        "operationId": "getAccountsGivenCustomerIdV4UsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id to fetch list of accounts for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "How many accounts should be returned per page, default is 30. Cannot be more than 100.",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 1,
              "exclusiveMinimum": false,
              "maximum": 100,
              "exclusiveMaximum": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "discriminator": {
                    "propertyName": "template",
                    "mapping": {
                      "CREDIT": "#/components/schemas/listCreditAccountResponse",
                      "DEBIT": "#/components/schemas/listDebitAccountResponse",
                      "PREPAID": "#/components/schemas/listPrepaidAccountResponse",
                      "FLEET": "#/components/schemas/listFleetAccountResponse",
                      "MULTICURR_EUR_DE": "#/components/schemas/listMultiCurrAccountResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v4/subAccount/{accountId}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get accounts lower in the hierarchy",
        "description": "This operation will respond with a list of accounts given the account id",
        "operationId": "getAccountsGivenLiableAccountIdV4UsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to fetch list of accounts for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "How many accounts should be returned per page, default is 30. Cannot be more than 100.",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 1,
              "exclusiveMinimum": false,
              "maximum": 100,
              "exclusiveMaximum": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "discriminator": {
                    "propertyName": "template",
                    "mapping": {
                      "CREDIT": "#/components/schemas/listCreditAccountResponse",
                      "DEBIT": "#/components/schemas/listDebitAccountResponse",
                      "PREPAID": "#/components/schemas/listPrepaidAccountResponse",
                      "FLEET": "#/components/schemas/listFleetAccountResponse",
                      "MULTICURR_EUR_DE": "#/components/schemas/listMultiCurrAccountResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/{id}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get account",
        "description": "This operation will respond with an account given account id",
        "operationId": "getAccountUsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountV3Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Update an account"],
        "summary": "Update an account",
        "description": "This operation will update given fields given an account id",
        "operationId": "updateAccountUsingPATCH",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The account id for given account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchV3ResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Account does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v3/customer/{customerId}": {
      "get": {
        "tags": ["Get account information"],
        "summary": "Get accounts given customerId",
        "description": "This operation will respond with a list of accounts given the customer id",
        "operationId": "getAccountsUsingGET",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id to fetch list of accounts for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "How many accounts should be returned per page, default is 30. Cannot be more than 100.",
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 1,
              "exclusiveMinimum": false,
              "maximum": 100,
              "exclusiveMaximum": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful lookup of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/listV3AccountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Create an account"],
        "summary": "Create account",
        "description": "This operation will create an account",
        "operationId": "createAccountUsingPOST",
        "parameters": [
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer id of which customer you want to create the account on",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createV3ResourceBody"
        },
        "responses": {
          "201": {
            "description": "Successful creation of the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v3/{id}/update/{propertyToUpdate}": {
      "post": {
        "tags": ["Update an account"],
        "summary": "Update account",
        "description": "Basic operation for updating an account. Check parameter updateProperty for possible parameters to update",
        "operationId": "updateAccountUsingPOST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The accountId of which account you want to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "biginteger"
            }
          },
          {
            "name": "auditUser",
            "in": "query",
            "description": "The audit user to log the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyToUpdate",
            "in": "path",
            "description": "What property you want to update\n   * __DELETE_ADDRESS__ - Deletes address.\n   * __DELETE_EINVOICE_ADDRESS_AND_OPERATOR__ - Deletes einvoice address and operator.\n   * __WRITE_OFF__ - Write-off uncollectible debt for given account id and book it as a loss. **Only applicable for CREDIT accounts**.\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DELETE_ADDRESS",
                "DELETE_EINVOICE_ADDRESS_AND_OPERATOR",
                "WRITE_OFF"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateResourceBody"
        },
        "responses": {
          "200": {
            "description": "Successful update of account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Given property to update is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "requestBodies": {
      "createV3ResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createV3ResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "createCreditResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createCreditResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "createDebitResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createDebitResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "createPrepaidResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createPrepaidResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "createFleetResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createFleetResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "createMultiCurrencyResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createMultiCurrencyResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly created account, these values will override the predefined template values",
        "required": true
      },
      "updateResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "discriminator": {
                "propertyName": "bodyTemplate",
                "mapping": {
                  "DELETE_ADDRESS": "#/components/schemas/updateResourceBody",
                  "DELETE_EINVOICE_ADDRESS_AND_OPERATOR": "#/components/schemas/updateResourceBody",
                  "WRITE_OFF": "#/components/schemas/writeOffResourceBody"
                }
              }
            }
          }
        },
        "description": "Select the bodyTemplate of the propertyToUpdate to view possible properties needed in the request body of the request.",
        "required": false
      },
      "patchV3ResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchV3ResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchCreditResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchCreditResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchCreditRemindersResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchCreditReminderResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchDebitResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchDebitResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchPrepaidResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchPrepaidResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchFleetResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchFleetResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      },
      "patchMultiCurrencyResourceBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchMultiCurrencyResourceBody"
            }
          }
        },
        "description": "The fields that you want to apply to your newly cr, these values will override the predefined template values",
        "required": true
      }
    },
    "schemas": {
      "createV3ResourceBody": {
        "type": "object",
        "required": ["accountTemplate"],
        "properties": {
          "accountTemplate": {
            "type": "string",
            "description": "Template name for which the account should be connected to",
            "example": "PREPAID"
          },
          "creditLimit": {
            "$ref": "#/components/schemas/creditLimit"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          },
          "address": {
            "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
            "$ref": "#/components/schemas/address"
          },
          "segment": {
            "$ref": "#/components/schemas/segment"
          }
        },
        "title": "createV3ResourceBody"
      },
      "listV3AccountResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "parentId": {
            "$ref": "#/components/schemas/parentId"
          },
          "status": {
            "$ref": "#/components/schemas/accountStatusGet"
          },
          "available": {
            "$ref": "#/components/schemas/available"
          },
          "balance": {
            "$ref": "#/components/schemas/balance"
          },
          "creditLimit": {
            "$ref": "#/components/schemas/creditLimit"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          }
        },
        "title": "listAccountResponse"
      },
      "accountV3Response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listV3AccountResponse"
          },
          {
            "properties": {
              "accountTemplate": {
                "type": "string",
                "description": "Template name for which the account is connected to",
                "example": "CREDIT"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "segment": {
                "$ref": "#/components/schemas/segment"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/usageLimit"
                }
              }
            }
          }
        ],
        "title": "accountResponse"
      },
      "createLiableBaseResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/createBaseResourceBody"
          },
          {
            "properties": {
              "parentId": {
                "type": "string",
                "format": "biginteger",
                "description": "This field is used when the institution is setting up an account liability hierarchy.\nThe parentId is used to determine the parent of this account.\nConsult Enfuce before using this field.\n",
                "example": 9876543210
              }
            }
          }
        ],
        "title": "createCreditResourceBody"
      },
      "createBaseResourceBody": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
            "$ref": "#/components/schemas/address"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "segment": {
            "$ref": "#/components/schemas/segment"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          }
        },
        "title": "createBaseResourceBody"
      },
      "createCreditResourceBody": {
        "required": ["creditLimit"],
        "allOf": [
          {
            "$ref": "#/components/schemas/createLiableBaseResourceBody"
          },
          {
            "properties": {
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "paymentTerms": {
                "$ref": "#/components/schemas/creditPaymentTerms"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "invoiceDayOfMonth": {
                "$ref": "#/components/schemas/invoiceDayOfMonth"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "productCode": {
                "example": "CREDIT_EUR_FI",
                "$ref": "#/components/schemas/productCodeInRequest"
              },
              "invoicePaymentMethod": {
                "$ref": "#/components/schemas/invoicePaymentMethod"
              }
            }
          }
        ],
        "title": "createCreditResourceBody"
      },
      "createPrepaidResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/createLiableBaseResourceBody"
          },
          {
            "properties": {
              "productCode": {
                "example": "CARD_EUR_FI",
                "$ref": "#/components/schemas/productCodeInRequest"
              }
            }
          }
        ],
        "title": "createPrepaidResourceBody"
      },
      "createMultiCurrencyResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/createBaseResourceBody"
          },
          {
            "properties": {
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "externalBalanceCheck": {
                "$ref": "#/components/schemas/externalBalanceCheck"
              },
              "subAccountTemplates": {
                "$ref": "#/components/schemas/subAccountTemplates"
              }
            }
          }
        ],
        "title": "createMultiCurrencyResourceBody"
      },
      "createDebitResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/createBaseResourceBody"
          },
          {
            "properties": {
              "productCode": {
                "example": "DEBIT_EUR_FI",
                "$ref": "#/components/schemas/productCodeInRequest"
              }
            }
          }
        ],
        "title": "createDebitResourceBody"
      },
      "createFleetResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/createLiableBaseResourceBody"
          },
          {
            "properties": {
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "externalCustomerReference": {
                "$ref": "#/components/schemas/externalCustomerReference"
              },
              "productCode": {
                "type": "string",
                "description": "This field is used when the institution has multiple account products setup.\nThe productCode is used to determine the specific account product.\nUse of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\n",
                "pattern": "FLEET[\\d]?_[A-Z]{3}_[A-Z]{2}",
                "example": "FLEET_EUR_FI"
              }
            }
          }
        ],
        "title": "createFleetResourceBody"
      },
      "patchV3ResourceBody": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements. Full address object is expected to be set when updating.",
            "$ref": "#/components/schemas/address"
          },
          "creditLimit": {
            "$ref": "#/components/schemas/creditLimit"
          },
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "eInvoice": {
            "$ref": "#/components/schemas/eInvoice"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "invoiceDeliveryMethod": {
            "$ref": "#/components/schemas/invoiceDeliveryMethod"
          },
          "minimumToPay": {
            "$ref": "#/components/schemas/minimumToPay"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          },
          "segment": {
            "$ref": "#/components/schemas/segment"
          },
          "status": {
            "$ref": "#/components/schemas/accountStatusPatch"
          },
          "usageLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/usageLimit"
            }
          }
        },
        "title": "patchV3ResourceBody",
        "description": "Updating set values"
      },
      "patchLiableResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchBaseResourceBody"
          },
          {
            "properties": {
              "parentId": {
                "type": "string",
                "format": "biginteger",
                "description": "This field is used when the institution is setting up an account liability hierarchy.\nThe parentId is used to determine the top account of the account hierarchy.\nConsult Enfuce before using this field.\n",
                "example": 9876543210
              }
            }
          }
        ]
      },
      "patchBaseResourceBody": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements. Full address object is expected to be set when updating.",
            "$ref": "#/components/schemas/updateAddress"
          },
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          },
          "segment": {
            "$ref": "#/components/schemas/segment"
          },
          "closureReason": {
            "$ref": "#/components/schemas/closureReason"
          },
          "usageLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/usageLimit"
            }
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          }
        },
        "title": "patchBaseResourceBody",
        "description": "Updating set values"
      },
      "patchCreditResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchLiableResourceBody"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/accountStatusPatchV4"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "interestPostingEnabled": {
                "$ref": "#/components/schemas/interestPostingEnabled"
              },
              "invoiceDayOfMonth": {
                "$ref": "#/components/schemas/invoiceDayOfMonth"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "paymentTerms": {
                "$ref": "#/components/schemas/creditPaymentTerms"
              },
              "invoicePaymentMethod": {
                "$ref": "#/components/schemas/invoicePaymentMethod"
              },
              "underInvestigation": {
                "$ref": "#/components/schemas/underInvestigation"
              }
            }
          }
        ],
        "title": "patchCreditResourceBody"
      },
      "patchCreditReminderResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/reminder"
          }
        ],
        "title": "patchCreditAccountRemindersBody"
      },
      "patchDebitResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchBaseResourceBody"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/accountStatusPatch"
              }
            }
          }
        ],
        "title": "patchDebitResourceBody"
      },
      "patchPrepaidResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchLiableResourceBody"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/accountStatusPatch"
              }
            }
          }
        ],
        "title": "patchPrepaidResourceBody"
      },
      "patchFleetResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchLiableResourceBody"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/accountStatusPatch"
              },
              "additionalInvoiceDaysOfMonth": {
                "$ref": "#/components/schemas/fleetAdditionalInvoiceDaysOfMonth"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "externalCustomerReference": {
                "$ref": "#/components/schemas/externalCustomerReference"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "invoiceDayOfMonth": {
                "$ref": "#/components/schemas/invoiceDayOfMonth"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "paymentTerms": {
                "$ref": "#/components/schemas/fleetPaymentTerms"
              },
              "invoicePaymentMethod": {
                "$ref": "#/components/schemas/invoicePaymentMethod"
              }
            }
          }
        ],
        "title": "patchFleetResourceBody"
      },
      "patchMultiCurrencyResourceBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/patchBaseResourceBody"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/accountStatusPatch"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "externalBalanceCheck": {
                "$ref": "#/components/schemas/externalBalanceCheck"
              },
              "interestPostingEnabled": {
                "$ref": "#/components/schemas/interestPostingEnabled"
              },
              "underInvestigation": {
                "$ref": "#/components/schemas/underInvestigation"
              },
              "subAccountTemplates": {
                "$ref": "#/components/schemas/subAccountTemplates"
              }
            }
          }
        ],
        "title": "patchMultiCurrencyResourceBody"
      },
      "baseAccountResponse": {
        "type": "object",
        "properties": {
          "available": {
            "$ref": "#/components/schemas/available"
          },
          "balance": {
            "$ref": "#/components/schemas/balance"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "number": {
            "$ref": "#/components/schemas/accountNumber"
          },
          "parentId": {
            "$ref": "#/components/schemas/parentId"
          },
          "status": {
            "$ref": "#/components/schemas/accountStatusGet"
          },
          "paymentReference": {
            "$ref": "#/components/schemas/paymentReference"
          },
          "template": {
            "type": "string",
            "description": "Template name for which the account is connected to"
          }
        },
        "title": "baseAccountResponse"
      },
      "standardAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseAccountResponse"
          },
          {
            "properties": {
              "segment": {
                "$ref": "#/components/schemas/segment"
              },
              "closureReason": {
                "$ref": "#/components/schemas/closureReason"
              }
            }
          }
        ],
        "title": "standardAccountResponse"
      },
      "listAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseAccountResponse"
          }
        ],
        "title": "listAccountResponse"
      },
      "listCreditAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listAccountResponse"
          },
          {
            "properties": {
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              }
            }
          }
        ],
        "title": "listCreditAccountResponse"
      },
      "listDebitAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listAccountResponse"
          },
          {
            "properties": {
              "iban": {
                "$ref": "#/components/schemas/iban"
              }
            }
          }
        ],
        "title": "listDebitAccountResponse"
      },
      "listPrepaidAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listAccountResponse"
          }
        ],
        "title": "listPrepaidAccountResponse"
      },
      "listFleetAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listAccountResponse"
          },
          {
            "properties": {
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              }
            }
          }
        ],
        "title": "listFleetAccountResponse"
      },
      "listMultiCurrAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/listAccountResponse"
          }
        ],
        "title": "listMultiCurrAccountResponse"
      },
      "debitAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/standardAccountResponse"
          },
          {
            "properties": {
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "productCode": {
                "example": "DEBIT_EUR_FI",
                "$ref": "#/components/schemas/productCodeInResponse"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "iban": {
                "$ref": "#/components/schemas/iban"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getUsageLimit"
                }
              }
            }
          }
        ],
        "title": "debitAccountResponse"
      },
      "creditAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/standardAccountResponse"
          },
          {
            "properties": {
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "dueDate": {
                "$ref": "#/components/schemas/dueDate"
              },
              "productCode": {
                "example": "CREDIT_EUR_FI",
                "$ref": "#/components/schemas/productCodeInResponse"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "interestPostingEnabled": {
                "$ref": "#/components/schemas/interestPostingEnabled"
              },
              "invoiceDayOfMonth": {
                "$ref": "#/components/schemas/invoiceDayOfMonth"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "invoicedBalance": {
                "$ref": "#/components/schemas/invoicedBalance"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "minimumToPayBalance": {
                "$ref": "#/components/schemas/minimumToPayBalance"
              },
              "overdueBalance": {
                "$ref": "#/components/schemas/overdueBalance"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getUsageLimit"
                }
              },
              "paymentTerms": {
                "$ref": "#/components/schemas/creditPaymentTerms"
              },
              "InvoicePaymentMethod": {
                "$ref": "#/components/schemas/invoicePaymentMethod"
              },
              "interestRates": {
                "$ref": "#/components/schemas/interestRates"
              },
              "underInvestigation": {
                "$ref": "#/components/schemas/underInvestigation"
              },
              "reminders": {
                "$ref": "#/components/schemas/reminders"
              }
            }
          }
        ],
        "title": "creditAccountResponse"
      },
      "multiCurrAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/standardAccountResponse"
          },
          {
            "properties": {
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "externalBalanceCheck": {
                "$ref": "#/components/schemas/externalBalanceCheck"
              },
              "interestPostingEnabled": {
                "$ref": "#/components/schemas/interestPostingEnabled"
              },
              "underInvestigation": {
                "$ref": "#/components/schemas/underInvestigation"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getUsageLimit"
                }
              }
            }
          }
        ],
        "title": "multiCurrAccountResponse"
      },
      "prepaidAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/standardAccountResponse"
          },
          {
            "properties": {
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "productCode": {
                "example": "CARD_EUR_FI",
                "$ref": "#/components/schemas/productCodeInResponse"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getUsageLimit"
                }
              },
              "iban": {
                "$ref": "#/components/schemas/iban"
              }
            }
          }
        ],
        "title": "prepaidAccountResponse"
      },
      "fleetAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/standardAccountResponse"
          },
          {
            "properties": {
              "additionalInvoiceDaysOfMonth": {
                "$ref": "#/components/schemas/fleetAdditionalInvoiceDaysOfMonth"
              },
              "address": {
                "description": "Address connected to an account that will override the address set on customer level. This is for example used when sending out statements",
                "$ref": "#/components/schemas/address"
              },
              "creditLimit": {
                "$ref": "#/components/schemas/creditLimit"
              },
              "productCode": {
                "example": "FLEET_EUR_FI",
                "$ref": "#/components/schemas/productCodeInResponse"
              },
              "eInvoice": {
                "$ref": "#/components/schemas/eInvoice"
              },
              "externalCustomerReference": {
                "$ref": "#/components/schemas/externalCustomerReference"
              },
              "invoiceDayOfMonth": {
                "$ref": "#/components/schemas/invoiceDayOfMonth"
              },
              "invoiceDeliveryMethod": {
                "$ref": "#/components/schemas/invoiceDeliveryMethod"
              },
              "minimumToPay": {
                "$ref": "#/components/schemas/minimumToPay"
              },
              "paymentTerms": {
                "$ref": "#/components/schemas/fleetPaymentTerms"
              },
              "reason": {
                "description": "Reason for account status change",
                "$ref": "#/components/schemas/reason"
              },
              "usageLimits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getUsageLimit"
                }
              },
              "InvoicePaymentMethod": {
                "$ref": "#/components/schemas/invoicePaymentMethod"
              }
            }
          }
        ],
        "title": "fleetAccountResponse"
      },
      "updateResourceBody": {
        "type": "object",
        "properties": {
          "bodyTemplate": {
            "$ref": "#/components/schemas/bodyTemplate"
          },
          "dummy": {
            "type": "string",
            "description": "Dummy value not used"
          }
        },
        "title": "updateResourceBody",
        "description": "Should set the value of the property you are updating, leave rest empty"
      },
      "writeOffResourceBody": {
        "type": "object",
        "properties": {
          "bodyTemplate": {
            "$ref": "#/components/schemas/bodyTemplate"
          },
          "writeOffType": {
            "type": "string",
            "description": "This value is optional, if not given `WRITE_OFF` is used.",
            "default": "WRITE_OFF",
            "enum": ["WRITE_OFF", "WRITE_OFF_2", "WRITE_OFF_3", "WRITE_OFF_4"]
          }
        },
        "title": "updateResourceBody"
      },
      "accountNumber": {
        "type": "string",
        "description": "Unique account number for given account. Must be numeric if paymentRefence.type defined as MOD10 or FINNISH_7_3_1!",
        "maxLength": 42,
        "example": 123456789
      },
      "fleetAdditionalInvoiceDaysOfMonth": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/invoiceDayOfMonth"
        },
        "description": "Additional days in a month when an invoice will be created.",
        "example": 5
      },
      "creditAdditionalInvoiceDaysOfMonth": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/invoiceDayOfMonth"
        },
        "description": "Additional days in month when statement/invoice will be created",
        "example": 5
      },
      "available": {
        "type": "number",
        "description": "Accounts's available amount",
        "example": 1000
      },
      "balance": {
        "type": "number",
        "description": "Account's balance",
        "example": 1000
      },
      "creditLimit": {
        "type": "number",
        "description": "Credit limit of the account",
        "example": 10000
      },
      "customerId": {
        "type": "string",
        "description": "Customer id for account owner",
        "example": 55667788990
      },
      "dueDate": {
        "type": "string",
        "format": "date",
        "description": "Due date for the latest invoice",
        "example": "2024-04-14"
      },
      "externalBalanceCheck": {
        "type": "boolean",
        "description": "The external balance check parameter enables the issuer to determine per account, whether the available balance during authorisation process should be checked by Enfuce or issuer (utilising Authorisation Control service). \nWhen set to “true”, Enfuce will not check the available balance of the account rather the issuer is expected to do it. \nAs the parameter is set on account level, it will automatically apply to all cards linked to account in question. \nPlease note that utilisation of this parameter requires implementation of the Authorisation Control service.\n"
      },
      "externalCustomerReference": {
        "type": "string",
        "maxLength": 30,
        "description": "To be printed on invoice in order for customer to handle invoice properly",
        "example": "Example customer ref"
      },
      "id": {
        "type": "string",
        "description": "Unique account id for given account",
        "example": 1234567890
      },
      "interestPostingEnabled": {
        "type": "boolean",
        "description": "If interest posting enabled",
        "example": true
      },
      "invoiceDayOfMonth": {
        "type": "integer",
        "maximum": 31,
        "minimum": 1,
        "description": "This will set the last day of the billing period. An invoice will be created and sent on the next day. If the day of the month day is exceeding the number of days in a given month then it will be the end of the month.",
        "example": 21
      },
      "invoicedBalance": {
        "type": "number",
        "description": "This amount represents the due payment expected from the customer. Please note that it does not include any potential overdue balances.",
        "example": 200.5
      },
      "minimumToPayBalance": {
        "type": "number",
        "description": "Invoiced minimum payment balance.",
        "example": 25
      },
      "overdueBalance": {
        "type": "number",
        "description": "The balance that remains unpaid after the due date has passed.",
        "example": 300.5
      },
      "parentId": {
        "type": "string",
        "description": "Account id of parent account. If empty then this is parent contract.",
        "example": 9876543210
      },
      "creditPaymentTerms": {
        "type": "integer",
        "maximum": 30,
        "minimum": 1,
        "description": "Number of days to allow for invoice to be paid before it goes overdue.\n\nUse of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce before taking into use.\n",
        "example": 10
      },
      "fleetPaymentTerms": {
        "type": "integer",
        "description": "Number of days to allow for invoice to be paid before it goes overdue.\n\nThe valid values for the parameter are integers between 1 and 31 (inclusive) and the specific value 45\n",
        "example": 10
      },
      "subAccountTemplates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/subAccountTemplatesEnum"
        },
        "description": "Templates for sub accounts to be created. Check usage with Enfuce!"
      },
      "subAccountTemplatesEnum": {
        "type": "string",
        "enum": [
          "MULTICURR_A_EUR",
          "MULTICURR_A_GBP",
          "MULTICURR_A_PLN",
          "MULTICURR_A_USD"
        ]
      },
      "multiCurrencyTemplate": {
        "type": "string",
        "enum": [
          "MULTICURR_DKK_DK",
          "MULTICURR_EUR_AT",
          "MULTICURR_EUR_DE",
          "MULTICURR_EUR_ES",
          "MULTICURR_EUR_FI",
          "MULTICURR_EUR_FR",
          "MULTICURR_EUR_IE",
          "MULTICURR_EUR_IT",
          "MULTICURR_GBP_GB",
          "MULTICURR_SEK_SE",
          "MULTICURR_EUR_NL",
          "MULTICURR_EUR_LU",
          "MULTICURR_EUR_BE",
          "MULTICURR_NOK_NO",
          "MULTICURR_EUR_PT",
          "MULTICURR_EUR_EE",
          "MULTICURR_EUR_LV",
          "MULTICURR_EUR_LT",
          "MULTICURR_EUR_MT",
          "MULTICURR_PLN_PL"
        ]
      },
      "name": {
        "type": "string",
        "maxLength": 64,
        "description": "Human readable name of an account",
        "example": "My example account name"
      },
      "bodyTemplate": {
        "type": "string",
        "description": "Request body template given based on selected property."
      },
      "productCodeInRequest": {
        "type": "string",
        "description": "This field is used when the institution has multiple account products setup.\nThe productCode is used to determine the specific account product.\nUse of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\n",
        "pattern": "^[A-Z][A-Z_0-9]{1,64}$",
        "example": "CARD_EUR_FI"
      },
      "productCodeInResponse": {
        "type": "string",
        "description": "The productCode is used to determine the specific account product.\nValues of the field are dependent on institution setup.\n",
        "example": "CARD_EUR_FI"
      },
      "underInvestigation": {
        "type": "boolean",
        "description": "If account is under investigation",
        "example": true
      },
      "reminders": {
        "type": "object",
        "description": "Reminder details",
        "properties": {
          "reminderStatus": {
            "$ref": "#/components/schemas/dunningStatus"
          },
          "disableReminderProcess": {
            "type": "boolean"
          },
          "reminder1TriggerDate": {
            "description": "Date when reminder 1 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "blockTriggerDate": {
            "description": "Date when card is blocked",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder2TriggerDate": {
            "description": "Date when reminder 2 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder3TriggerDate": {
            "description": "Date when reminder 3 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder4TriggerDate": {
            "description": "Date when reminder 4 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder5TriggerDate": {
            "description": "Date when reminder 5 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder6TriggerDate": {
            "description": "Date when reminder 6 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder7TriggerDate": {
            "description": "Date when reminder 7 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "collectionTriggerDate": {
            "description": "Date when statement is sent to collection",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          }
        },
        "title": "reminders"
      },
      "reminder": {
        "type": "object",
        "description": "Reminder details for update",
        "properties": {
          "disableReminderProcess": {
            "type": "boolean"
          },
          "reminder1TriggerDate": {
            "description": "Date when reminder 1 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "blockTriggerDate": {
            "description": "Date when card is blocked",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder2TriggerDate": {
            "description": "Date when reminder 2 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder3TriggerDate": {
            "description": "Date when reminder 3 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder4TriggerDate": {
            "description": "Date when reminder 4 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder5TriggerDate": {
            "description": "Date when reminder 5 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder6TriggerDate": {
            "description": "Date when reminder 6 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "reminder7TriggerDate": {
            "description": "Date when reminder 7 is triggered",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          },
          "collectionTriggerDate": {
            "description": "Date when statement is sent to collection",
            "type": "string",
            "format": "date",
            "example": "2019-11-27"
          }
        },
        "title": "reminder"
      },
      "country": {
        "type": "string",
        "description": "A valid ISO 3166-1 alpha-3 country code, except for QZZ (UNMIK in Kosovo) and ROM for Romania.",
        "pattern": "[A-Z]{3}",
        "example": "FIN"
      },
      "address": {
        "type": "object",
        "required": ["address1", "city", "country", "zipCode"],
        "properties": {
          "address1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "Kings street 12"
          },
          "address2": {
            "type": "string",
            "maxLength": 255
          },
          "address3": {
            "type": "string",
            "maxLength": 255
          },
          "address4": {
            "type": "string",
            "maxLength": 255
          },
          "city": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "Mariehamn"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          },
          "region": {
            "type": "string",
            "maxLength": 32,
            "example": "Åland Islands"
          },
          "zipCode": {
            "type": "string",
            "minLength": 1,
            "maxLength": 32,
            "example": 22100
          }
        },
        "title": "address"
      },
      "segment": {
        "type": "string",
        "description": "Field enables to group an entity into a segment. This field will be exported but no logic is applied to this in Enfuce API",
        "enum": [
          "SEGMENT_A",
          "SEGMENT_B",
          "SEGMENT_C",
          "SEGMENT_D",
          "SEGMENT_E",
          "SEGMENT_F"
        ],
        "title": "segment"
      },
      "paymentReference": {
        "type": "object",
        "description": "Number connected to account that will be used to map incoming payments to",
        "required": ["type"],
        "properties": {
          "number": {
            "type": "string",
            "description": "Payment reference number",
            "example": 1234567897
          },
          "type": {
            "type": "string",
            "enum": ["MOD10", "FINNISH_7_3_1", "CUSTOMER_SPECIFIC"]
          }
        }
      },
      "eInvoice": {
        "type": "object",
        "properties": {
          "address": {
            "maxLength": 32,
            "type": "string",
            "example": "FI7165429021331431"
          },
          "operator": {
            "maxLength": 32,
            "type": "string",
            "example": "NDEAFIHH"
          },
          "paymentInstruction": {
            "maxLength": 2,
            "type": "string",
            "example": "AA"
          }
        }
      },
      "invoiceDeliveryMethod": {
        "type": "string",
        "enum": [
          "REGULAR_MAIL",
          "EMAIL",
          "E_INVOICE",
          "CUSTOM_1",
          "CUSTOM_2",
          "CUSTOM_3",
          "CUSTOM_4",
          "CUSTOM_5"
        ]
      },
      "minimumToPay": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "percentage": {
            "type": "number",
            "maximum": 100,
            "minimum": 0
          }
        }
      },
      "invoicePaymentMethod": {
        "type": "string",
        "description": "Use of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\nAlso, it is only a value, there is no functionality behind it.\n",
        "enum": ["DIRECT_DEBIT", "PLUS_GIROT", "BANK_GIROT"]
      },
      "resourceResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Short description of the result of the action"
          },
          "id": {
            "type": "string",
            "description": "Will contain the ID of the resource that has been created or updated"
          }
        },
        "title": "resourceResponse"
      },
      "errorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "An error code indicating what kind of error. I.e. HTTP error code"
          },
          "message": {
            "type": "string",
            "description": "Error message in human-readable format"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique error identifier"
          },
          "errorCode": {
            "type": "string",
            "description": "Enfuce code for a specific error type"
          },
          "errorType": {
            "type": "string",
            "description": "Error type",
            "enum": [
              "STATIC_VALIDATION_ERROR",
              "DYNAMIC_VALIDATION_ERROR",
              "INTEGRATION_ERROR",
              "SECURITY_ERROR",
              "UNEXPECTED_ERROR"
            ]
          },
          "errorReason": {
            "type": "string",
            "description": "Free-form text explaining the error reason"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Datetime when error occurred"
          }
        }
      },
      "updateAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "maxLength": 255
          },
          "address2": {
            "type": "string",
            "maxLength": 255
          },
          "address3": {
            "type": "string",
            "maxLength": 255
          },
          "address4": {
            "type": "string",
            "maxLength": 255
          },
          "city": {
            "type": "string",
            "maxLength": 255
          },
          "country": {
            "$ref": "#/components/schemas/country"
          },
          "region": {
            "type": "string",
            "maxLength": 32
          },
          "zipCode": {
            "type": "string",
            "maxLength": 32
          }
        },
        "title": "updateAddress"
      },
      "reason": {
        "type": "string",
        "description": "Reason for contract status change",
        "maxLength": 32,
        "title": "reason"
      },
      "closureReason": {
        "type": "string",
        "description": "Field enables to define entity's closure reason. This field will be exported but no logic is applied to this in Enfuce API",
        "enum": ["CLOSED1", "CLOSED2", "CLOSED3", "CLOSED4", "CLOSED5"],
        "title": "closureReason"
      },
      "baseUsageLimit": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "24H",
              "DAILY",
              "MONTHLY",
              "WEEKLY",
              "ANNUAL_YEARLY",
              "ROLLING_YEARLY"
            ],
            "description": "Time period of usage limiter. Available usage limiters are:\n   * __24H__ - sliding window limiter for the last 24 hours\n   * __DAILY__ - Daily limiters are not part of standard usage limiter setup. Use of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\n   * __MONTHLY__ - limiter for the current month starting on 1st\n   * __WEEKLY__ - limiter for current week starting on Monday\n   * __ANNUAL_YEARLY__ - Annual yearly limiters are not part of standard usage limiter setup. Use of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\n   * __ROLLING_YEARLY__ - Rolling yearly limiters are not part of standard usage limiter setup. Use of this field as well as the values of the field, is dependent on institution setup and should be aligned with Enfuce prior to use.\n"
          }
        },
        "title": "baseUsageLimit"
      },
      "limitValues": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": ["ATM", "RETAIL", "ALL"],
            "description": "Note that all values must be present when set. Usage limiter values are:\n  * __ATM__ - ATM max withdrawal limit\n  * __RETAIL__ - Retail max purchase limit\n  * __ALL__ - All usage max limit\n"
          },
          "reset": {
            "type": "boolean",
            "description": "If set to true this specific usage limit will be reset to product default and any other values sent in to the request will be ignored."
          },
          "singleAmount": {
            "type": "number",
            "description": "The max amount of single transaction. If set to 0 it will not be effective, unless count and sumAmount are also set to 0.",
            "example": 12.5
          },
          "count": {
            "type": "integer",
            "description": "The max number of actions allowed per time period. If set to 0 then it will effectively block.",
            "example": 5
          },
          "sumAmount": {
            "type": "number",
            "description": "the max allowed amount allowed per time period. If set to 0 then it will effectively block.",
            "example": 1200
          }
        },
        "title": "limitValue"
      },
      "usageLimit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseUsageLimit"
          },
          {
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/limitValues"
                }
              }
            }
          }
        ],
        "title": "usageLimit"
      },
      "accountStatusPatchV4": {
        "type": "string",
        "description": "If account status is updated to ACCOUNT_COLLECTION, it is not allowed to be updated back to any other status.",
        "enum": [
          "ACCOUNT_BLOCKED",
          "ACCOUNT_OK",
          "ACCOUNT_TO_CLOSE",
          "ACCOUNT_COLLECTION"
        ],
        "title": "accountStatusPatchV4"
      },
      "accountStatusPatch": {
        "type": "string",
        "enum": ["ACCOUNT_BLOCKED", "ACCOUNT_OK", "ACCOUNT_TO_CLOSE"],
        "title": "accountStatusPatch"
      },
      "currency": {
        "type": "string",
        "description": "A valid ISO 4217 currency code",
        "pattern": "[A-Z]{3}",
        "example": "EUR"
      },
      "accountStatusGet": {
        "type": "string",
        "enum": [
          "ACCOUNT_BLOCKED",
          "ACCOUNT_COLLECTION",
          "ACCOUNT_OK",
          "ACCOUNT_TO_CLOSE",
          "ACCOUNT_CLOSED",
          "ACCOUNT_AUTO_CLOSED"
        ],
        "title": "accountStatusGet"
      },
      "getLimitValues": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/limitValues"
          },
          {
            "properties": {
              "availableAmount": {
                "type": "number",
                "description": "Available amount for specific usage limit. Note this is not present if sumAmount is not set.",
                "example": 1200
              },
              "availableCount": {
                "type": "integer",
                "description": "Available count for specific usage limit. Note this is not present if count is not set.",
                "example": 1200
              },
              "usedAmount": {
                "type": "number",
                "description": "Used amount for specific usage limit",
                "example": 1200
              },
              "usedCount": {
                "type": "integer",
                "description": "Used count for specific usage limit",
                "example": 1200
              }
            }
          }
        ],
        "title": "getLimitValues"
      },
      "getUsageLimit": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseUsageLimit"
          },
          {
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getLimitValues"
                }
              }
            }
          }
        ],
        "title": "getUsageLimit"
      },
      "interestRate": {
        "type": "object",
        "properties": {
          "interestRate": {
            "type": "number"
          },
          "interestType": {
            "type": "string"
          }
        }
      },
      "interestRates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/interestRate"
        },
        "description": "Revolving or overdue Interest rate percentages that is effective for the account."
      },
      "dunningStatus": {
        "type": "string",
        "enum": [
          "WAIT",
          "REMINDER1_SENT",
          "CARD_BLOCKED",
          "REMINDER2_SENT",
          "REMINDER3_SENT",
          "REMINDER4_SENT",
          "REMINDER5_SENT",
          "REMINDER6_SENT",
          "REMINDER7_SENT",
          "COLLECTION_SENT",
          "STOPPED",
          "DONE"
        ]
      },
      "iban": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "description": "An IBAN number",
            "example": "FI7165429021331431"
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Account",
      "tags": [
        "Create an account",
        "Get account information",
        "Update an account"
      ]
    }
  ]
}
